@page
@model HelloWorldWeb.Pages.IndexModel
@{
    ViewData["Title"] = "Quiz";
}

<link rel="stylesheet" href="/css/site.css" />

<!-- רקע HTML בלבד (ללא GIF) -->
<iframe src="/logo/fsociety_matrix_blue.html" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -2; border: none; pointer-events: none; opacity: 0.1;"></iframe>

<!-- לוגו -->
<div class="logo-header" style="margin-top: 10px; margin-bottom: 5px;">
    <img src="/logo/logo.png" alt="WINTERNET QUIZ" style="max-width: 300px; height: auto;" />
</div>

<!-- כפתור התנתקות  -->
<a href="/Logout" class="next-question-btn" style="position: fixed; top: 20px; left: 20px; text-decoration: none;">🚪 התנתקות</a>

<!-- כפתור GitHub Star -->
<div style="position: fixed; bottom: 20px; left: 20px; z-index: 1000;">
    <a href="https://github.com/yanivbahalul/WinterNET" target="_blank"
       title="דרג את הפרויקט שלי"
       style="text-decoration: none; display: inline-flex; align-items: center; justify-content: center;
              width: 50px; height: 50px; border-radius: 50%; background-color: var(--rojo);
              color: white; font-size: 28px; font-weight: bold; box-shadow: 0 0 10px rgba(223, 45, 47, 0.8);">
        ⭐
    </a>
</div>

<!-- כפתור טבלת מובילים + ניהול -->
<div style="position: fixed; top: 20px; right: 20px; z-index: 1000; display: flex; gap: 10px;">
    <a href="/Leaderboard" class="next-question-btn">🏆 מובילים</a>
    @if (Model.Username == "Admin")
    {
        <a href="/Admin" class="next-question-btn">🛠️ ניהול</a>
    }
</div>

<!-- שם משתמש מוצג -->
<p style="color: #DF2D2F; text-align: center; margin-top: 10px; font-size: 16px;">
    👤 Logged in as <strong>@Model.Username</strong>
</p>

<!-- כמות משתמשים מחוברים -->
<p style="color: #DF2D2F; text-align: center; margin-bottom: 5px; font-size: 14px;">
    🔴 מחוברים כעת: <strong id="online-count">@Model.OnlineCount</strong>
</p>

<!-- תוכן ראשי -->
<div class="quiz-container">
    <img src="/@Model.QuestionImage" alt="שאלה" loading="lazy" />

    <form method="post">
        @Html.AntiForgeryToken()
        <input type="hidden" name="questionImage" value="@Model.QuestionImage" />
        <input type="hidden" name="answersJson" value='@Newtonsoft.Json.JsonConvert.SerializeObject(Model.ShuffledAnswers)' />

        <div class="answers">
            @foreach (var answer in Model.ShuffledAnswers)
            {
                var answerClass = "";
                if (Model.AnswerChecked)
                {
                    answerClass = answer.Key == "correct" ? "correct" :
                                  (Model.SelectedAnswer == answer.Key ? "incorrect" : "");
                }

                <button type="submit"
                        name="answer"
                        value="@answer.Key"
                        class="answer-btn @answerClass"
                        @(Model.AnswerChecked ? "disabled" : "")>
                    <img src="/@answer.Value" alt="תשובה" loading="lazy" />
                </button>
            }
        </div>
    </form>

    @if (Model.AnswerChecked)
    {
        <p style="margin-top:15px; font-size:18px; color:@(Model.IsCorrect ? "#32cd32" : "#ff4c4c"); font-weight: bold;">
            @(Model.IsCorrect ? "תשובה נכונה!" : "תשובה שגויה")
        </p>
    }

    <div class="button-row">
        <form method="get">
            <button class="next-question-btn">שאלה הבאה</button>
        </form>

        <form method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" name="reset" value="1" />
            <button class="next-question-btn" style="background-color: #aa3333;">איפוס שאלות</button>
        </form>
    </div>

    <!-- דווח על שאלה -->
    <div style="display: flex; flex-direction: column; align-items: center; margin-top: 32px;">
        <form id="report-form" style="display: flex; flex-direction: column; align-items: center; gap: 10px; max-width: 400px; width: 100%;">
            <input type="hidden" name="questionImage" value="@Model.QuestionImage" />
            <input type="hidden" name="answersJson" value='@Newtonsoft.Json.JsonConvert.SerializeObject(Model.ShuffledAnswers)' />
            <input type="hidden" name="correctAnswer" value='@(Model.ShuffledAnswers.ContainsKey("correct") ? Model.ShuffledAnswers["correct"] : "")' />
            <input type="hidden" name="selectedAnswer" value="@Model.SelectedAnswer" />
            <label for="explanation" style="font-weight: bold; color: var(--rojo);">יש טעות בשאלה? דווח לנו</label>
            <textarea name="explanation" id="explanation" required placeholder="נא לפרט מה לא תקין..." style="width: 100%; min-height: 60px; border-radius: 8px; border: 1px solid #ccc; padding: 8px; font-size: 16px; color: var(--licorice);"></textarea>
            <button type="submit" class="next-question-btn" style="background-color: var(--bittersweet-shimmer); color: var(--isabelline); font-size: 20px; padding: 12px 32px;">דווח על טעות בשאלה</button>
        </form>
    </div>
</div>

<!-- סטטיסטיקה תחתונה -->
<div id="stats-toggle" onclick="toggleStats()">⬆️</div>

<div id="stats-panel" class="hidden">
    <h3>📊 סטטיסטיקה אישית</h3>
    <ul>
        <li>✅ תשובות נכונות: <span id="stat-correct">0</span></li>
        <li>📋 שאלות שנענו: <span id="stat-total">0</span></li>
        <li>📈 אחוז הצלחה: <span id="stat-success">0%</span></li>
    </ul>
</div>

<script>
let updateInterval;

async function fetchStats() {
    try {
        const res = await fetch('/Stats?_=' + new Date().getTime());
        const data = await res.json();
        if (data && data.correct !== undefined) {
            document.getElementById('stat-correct').innerText = data.correct;
            document.getElementById('stat-total').innerText = data.total;
            document.getElementById('stat-success').innerText = data.successRate + '%';
        }
    } catch (e) {
        console.warn("Failed to fetch stats:", e);
    }
}

async function fetchOnlineCount() {
    try {
        const res = await fetch('/api/online-count?_=' + new Date().getTime());
        const data = await res.json();
        if (data && data.online !== undefined) {
            document.getElementById('online-count').innerText = data.online;
        }
    } catch (e) {
        console.warn("Failed to fetch online count:", e);
    }
}

function toggleStats() {
    const panel = document.getElementById('stats-panel');
    const toggle = document.getElementById('stats-toggle');
    const isOpen = !panel.classList.contains('hidden');
    panel.classList.toggle('hidden');
    toggle.innerText = isOpen ? '⬆️' : '⬇️';
    if (!isOpen) {
        fetchStats();
        fetchOnlineCount();
    }
}

function startAutoUpdate() {
    updateInterval = setInterval(() => {
        fetchStats();
        fetchOnlineCount();
    }, 5000);
}

function stopAutoUpdate() {
    if (updateInterval) {
        clearInterval(updateInterval);
        updateInterval = null;
    }
}

window.addEventListener("load", () => {
    fetchStats();
    fetchOnlineCount();
    startAutoUpdate();
});

document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        stopAutoUpdate();
    } else {
        startAutoUpdate();
    }
});

// דווח על טעות בשאלה
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('report-form');
    if (!form) return;

    form.addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(form);
        const data = {};
        formData.forEach((value, key) => {
            if (key === 'answersJson') {
                data['answers'] = value;
            } else {
                data[key] = value;
            }
        });

        try {
            const res = await fetch('/Index?handler=ReportError', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            if (res.ok) {
                alert('הדיווח נשלח בהצלחה!');
                form.reset();
            } else {
                alert('אירעה שגיאה בשליחת הדיווח.');
            }
        } catch (err) {
            alert('אירעה שגיאה בשליחת הדיווח.');
        }
    });
});
</script>

<!-- הגנה מפתיחת DevTools -->
<script>
(function () {
    let triggered = false;
    const element = new Image();

    Object.defineProperty(element, 'id', {
        get: function () {
            if (!triggered) {
                triggered = true;
                window.location.href = '/Cheater';
            }
        }
    });

    setInterval(function () {
        triggered = false;
        console.log(element);
    }, 1000);

    window.addEventListener('keydown', function (e) {
        if (
            e.key === 'F12' ||
            (e.ctrlKey && e.shiftKey && ['i', 'j', 'c'].includes(e.key.toLowerCase()))
        ) {
            window.location.href = '/Cheater';
        }
    });
})();
</script>
